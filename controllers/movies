const Movie = require('../models/movies')

const validateUpdater = (data) => {
    const allowedFields = ['title', 'description', 'year', 'duration', 'genre', 'isAvailable', 'nextAvailableDate'];
    return Object.keys(data).every((key) => allowedFields.includes(key));
}

let getAllMovies = async(req, res) => {
    try {
        const movies = await Movie.find();
        res.status(200).json(movies);
    }catch(error){
        res.status(500).json({ message: 'error retrieven objects from db', error})
    }
}

let postMovie = async(req, res) => {
    const { title, description, year, duration, genre, isAvailable, nextAvailableDate } = req.body
    try {
        const movie = new Movie({ title, description, year, duration, genre, isAvailable, nextAvailableDate})

        const savedMovie = await movie.save();
        res.status(201).json(savedMovie);
    }catch(error){
        console.error(error)
        res.status(500).json({ message: 'error al cargar en la base de datos'})
    }
}

let updateMovie = async (req, res) => {
    const{id} = req.params;
    const updates = req.body

    if(!validateUpdater(updates)){
        return res.status(400).json({message: 'Campos invalidos para actualizar'})
    }

    try{
        const movie = await Movie.findByIdAndUpdate(id , updates, {
            new : true,
            runValidators: true
        });

        if(!movie){
            return res.status(404).json({message: "No se encontrÃ³ la pelicula para modificar!"});
        }
        res.json(movie)
    }catch(error){
        console.error(error)
        res.status(500).json({ message: 'error al cargar en la base de datos'})
}};

let deleteMovie = async (req, res) =>{
    const{id} = req.params.id;
    await Movie.findByIdAndDelete(req.params.id);
    res.send(200);
};

module.exports = {
    getAllMovies,
    postMovie,
    updateMovie,
    deleteMovie, 
    
}